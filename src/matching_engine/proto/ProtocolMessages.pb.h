// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolMessages.proto

#ifndef PROTOBUF_ProtocolMessages_2eproto__INCLUDED
#define PROTOBUF_ProtocolMessages_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace matching {
namespace engine {
namespace messages {

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_ProtocolMessages_2eproto();
void protobuf_AssignDesc_ProtocolMessages_2eproto();
void protobuf_ShutdownFile_ProtocolMessages_2eproto();

class BalanceNotification;
class BalanceUpdate;
class CashOperation;
class LimitOrder;
class LimitOrderCancel;
class MarketOrder;
class MultiLimitOrder;
class MultiLimitOrder_Order;
class QuotesUpdate;
class Response;
class SubscribeToBalanceUpdate;
class SubscribeToQuotesUpdate;
class WalletCredentialsReload;

// ===================================================================

class Response : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.Response) */ {
 public:
  Response();
  virtual ~Response();

  Response(const Response& from);

  inline Response& operator=(const Response& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Response& default_instance();

  void Swap(Response* other);

  // implements Message ----------------------------------------------

  inline Response* New() const { return New(NULL); }

  Response* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Response* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional string bussinesId = 2;
  void clear_bussinesid();
  static const int kBussinesIdFieldNumber = 2;
  const ::std::string& bussinesid() const;
  void set_bussinesid(const ::std::string& value);
  void set_bussinesid(const char* value);
  void set_bussinesid(const char* value, size_t size);
  ::std::string* mutable_bussinesid();
  ::std::string* release_bussinesid();
  void set_allocated_bussinesid(::std::string* bussinesid);

  // optional string recordId = 3;
  void clear_recordid();
  static const int kRecordIdFieldNumber = 3;
  const ::std::string& recordid() const;
  void set_recordid(const ::std::string& value);
  void set_recordid(const char* value);
  void set_recordid(const char* value, size_t size);
  ::std::string* mutable_recordid();
  ::std::string* release_recordid();
  void set_allocated_recordid(::std::string* recordid);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.Response)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::internal::ArenaStringPtr bussinesid_;
  ::google::protobuf::internal::ArenaStringPtr recordid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static Response* default_instance_;
};
// -------------------------------------------------------------------

class CashOperation : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.CashOperation) */ {
 public:
  CashOperation();
  virtual ~CashOperation();

  CashOperation(const CashOperation& from);

  inline CashOperation& operator=(const CashOperation& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CashOperation& default_instance();

  void Swap(CashOperation* other);

  // implements Message ----------------------------------------------

  inline CashOperation* New() const { return New(NULL); }

  CashOperation* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CashOperation* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional string clientId = 2;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional int64 dateTime = 3;
  void clear_datetime();
  static const int kDateTimeFieldNumber = 3;
  ::google::protobuf::int64 datetime() const;
  void set_datetime(::google::protobuf::int64 value);

  // optional string assetId = 4;
  void clear_assetid();
  static const int kAssetIdFieldNumber = 4;
  const ::std::string& assetid() const;
  void set_assetid(const ::std::string& value);
  void set_assetid(const char* value);
  void set_assetid(const char* value, size_t size);
  ::std::string* mutable_assetid();
  ::std::string* release_assetid();
  void set_allocated_assetid(::std::string* assetid);

  // optional double amount = 5;
  void clear_amount();
  static const int kAmountFieldNumber = 5;
  double amount() const;
  void set_amount(double value);

  // optional string bussinesId = 6;
  void clear_bussinesid();
  static const int kBussinesIdFieldNumber = 6;
  const ::std::string& bussinesid() const;
  void set_bussinesid(const ::std::string& value);
  void set_bussinesid(const char* value);
  void set_bussinesid(const char* value, size_t size);
  ::std::string* mutable_bussinesid();
  ::std::string* release_bussinesid();
  void set_allocated_bussinesid(::std::string* bussinesid);

  // optional bool sendToBitcoin = 7;
  void clear_sendtobitcoin();
  static const int kSendToBitcoinFieldNumber = 7;
  bool sendtobitcoin() const;
  void set_sendtobitcoin(bool value);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.CashOperation)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::int64 datetime_;
  ::google::protobuf::internal::ArenaStringPtr assetid_;
  double amount_;
  ::google::protobuf::internal::ArenaStringPtr bussinesid_;
  bool sendtobitcoin_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static CashOperation* default_instance_;
};
// -------------------------------------------------------------------

class LimitOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.LimitOrder) */ {
 public:
  LimitOrder();
  virtual ~LimitOrder();

  LimitOrder(const LimitOrder& from);

  inline LimitOrder& operator=(const LimitOrder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimitOrder& default_instance();

  void Swap(LimitOrder* other);

  // implements Message ----------------------------------------------

  inline LimitOrder* New() const { return New(NULL); }

  LimitOrder* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LimitOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional string clientId = 3;
  void clear_clientid();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string assetPairId = 4;
  void clear_assetpairid();
  static const int kAssetPairIdFieldNumber = 4;
  const ::std::string& assetpairid() const;
  void set_assetpairid(const ::std::string& value);
  void set_assetpairid(const char* value);
  void set_assetpairid(const char* value, size_t size);
  ::std::string* mutable_assetpairid();
  ::std::string* release_assetpairid();
  void set_allocated_assetpairid(::std::string* assetpairid);

  // optional double volume = 5;
  void clear_volume();
  static const int kVolumeFieldNumber = 5;
  double volume() const;
  void set_volume(double value);

  // optional double price = 6;
  void clear_price();
  static const int kPriceFieldNumber = 6;
  double price() const;
  void set_price(double value);

  // optional bool cancelAllPreviousLimitOrders = 7;
  void clear_cancelallpreviouslimitorders();
  static const int kCancelAllPreviousLimitOrdersFieldNumber = 7;
  bool cancelallpreviouslimitorders() const;
  void set_cancelallpreviouslimitorders(bool value);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.LimitOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr assetpairid_;
  double volume_;
  double price_;
  bool cancelallpreviouslimitorders_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static LimitOrder* default_instance_;
};
// -------------------------------------------------------------------

class MarketOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.MarketOrder) */ {
 public:
  MarketOrder();
  virtual ~MarketOrder();

  MarketOrder(const MarketOrder& from);

  inline MarketOrder& operator=(const MarketOrder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarketOrder& default_instance();

  void Swap(MarketOrder* other);

  // implements Message ----------------------------------------------

  inline MarketOrder* New() const { return New(NULL); }

  MarketOrder* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MarketOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional string clientId = 3;
  void clear_clientid();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string assetPairId = 4;
  void clear_assetpairid();
  static const int kAssetPairIdFieldNumber = 4;
  const ::std::string& assetpairid() const;
  void set_assetpairid(const ::std::string& value);
  void set_assetpairid(const char* value);
  void set_assetpairid(const char* value, size_t size);
  ::std::string* mutable_assetpairid();
  ::std::string* release_assetpairid();
  void set_allocated_assetpairid(::std::string* assetpairid);

  // optional double volume = 5;
  void clear_volume();
  static const int kVolumeFieldNumber = 5;
  double volume() const;
  void set_volume(double value);

  // optional bool straight = 6;
  void clear_straight();
  static const int kStraightFieldNumber = 6;
  bool straight() const;
  void set_straight(bool value);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.MarketOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr assetpairid_;
  double volume_;
  bool straight_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static MarketOrder* default_instance_;
};
// -------------------------------------------------------------------

class LimitOrderCancel : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.LimitOrderCancel) */ {
 public:
  LimitOrderCancel();
  virtual ~LimitOrderCancel();

  LimitOrderCancel(const LimitOrderCancel& from);

  inline LimitOrderCancel& operator=(const LimitOrderCancel& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimitOrderCancel& default_instance();

  void Swap(LimitOrderCancel* other);

  // implements Message ----------------------------------------------

  inline LimitOrderCancel* New() const { return New(NULL); }

  LimitOrderCancel* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LimitOrderCancel* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional int64 limitOrderId = 2;
  void clear_limitorderid();
  static const int kLimitOrderIdFieldNumber = 2;
  ::google::protobuf::int64 limitorderid() const;
  void set_limitorderid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.LimitOrderCancel)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 limitorderid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static LimitOrderCancel* default_instance_;
};
// -------------------------------------------------------------------

class BalanceUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.BalanceUpdate) */ {
 public:
  BalanceUpdate();
  virtual ~BalanceUpdate();

  BalanceUpdate(const BalanceUpdate& from);

  inline BalanceUpdate& operator=(const BalanceUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BalanceUpdate& default_instance();

  void Swap(BalanceUpdate* other);

  // implements Message ----------------------------------------------

  inline BalanceUpdate* New() const { return New(NULL); }

  BalanceUpdate* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BalanceUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional string clientId = 2;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string assetId = 3;
  void clear_assetid();
  static const int kAssetIdFieldNumber = 3;
  const ::std::string& assetid() const;
  void set_assetid(const ::std::string& value);
  void set_assetid(const char* value);
  void set_assetid(const char* value, size_t size);
  ::std::string* mutable_assetid();
  ::std::string* release_assetid();
  void set_allocated_assetid(::std::string* assetid);

  // optional double amount = 4;
  void clear_amount();
  static const int kAmountFieldNumber = 4;
  double amount() const;
  void set_amount(double value);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.BalanceUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr assetid_;
  double amount_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static BalanceUpdate* default_instance_;
};
// -------------------------------------------------------------------

class MultiLimitOrder_Order : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.MultiLimitOrder.Order) */ {
 public:
  MultiLimitOrder_Order();
  virtual ~MultiLimitOrder_Order();

  MultiLimitOrder_Order(const MultiLimitOrder_Order& from);

  inline MultiLimitOrder_Order& operator=(const MultiLimitOrder_Order& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiLimitOrder_Order& default_instance();

  void Swap(MultiLimitOrder_Order* other);

  // implements Message ----------------------------------------------

  inline MultiLimitOrder_Order* New() const { return New(NULL); }

  MultiLimitOrder_Order* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiLimitOrder_Order* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional double volume = 1;
  void clear_volume();
  static const int kVolumeFieldNumber = 1;
  double volume() const;
  void set_volume(double value);

  // optional double price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  double price() const;
  void set_price(double value);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.MultiLimitOrder.Order)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  double volume_;
  double price_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static MultiLimitOrder_Order* default_instance_;
};
// -------------------------------------------------------------------

class MultiLimitOrder : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.MultiLimitOrder) */ {
 public:
  MultiLimitOrder();
  virtual ~MultiLimitOrder();

  MultiLimitOrder(const MultiLimitOrder& from);

  inline MultiLimitOrder& operator=(const MultiLimitOrder& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MultiLimitOrder& default_instance();

  void Swap(MultiLimitOrder* other);

  // implements Message ----------------------------------------------

  inline MultiLimitOrder* New() const { return New(NULL); }

  MultiLimitOrder* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MultiLimitOrder* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef MultiLimitOrder_Order Order;

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional int64 timestamp = 2;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 2;
  ::google::protobuf::int64 timestamp() const;
  void set_timestamp(::google::protobuf::int64 value);

  // optional string clientId = 3;
  void clear_clientid();
  static const int kClientIdFieldNumber = 3;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // optional string assetPairId = 4;
  void clear_assetpairid();
  static const int kAssetPairIdFieldNumber = 4;
  const ::std::string& assetpairid() const;
  void set_assetpairid(const ::std::string& value);
  void set_assetpairid(const char* value);
  void set_assetpairid(const char* value, size_t size);
  ::std::string* mutable_assetpairid();
  ::std::string* release_assetpairid();
  void set_allocated_assetpairid(::std::string* assetpairid);

  // repeated .matching.engine.messages.MultiLimitOrder.Order orders = 5;
  int orders_size() const;
  void clear_orders();
  static const int kOrdersFieldNumber = 5;
  const ::matching::engine::messages::MultiLimitOrder_Order& orders(int index) const;
  ::matching::engine::messages::MultiLimitOrder_Order* mutable_orders(int index);
  ::matching::engine::messages::MultiLimitOrder_Order* add_orders();
  ::google::protobuf::RepeatedPtrField< ::matching::engine::messages::MultiLimitOrder_Order >*
      mutable_orders();
  const ::google::protobuf::RepeatedPtrField< ::matching::engine::messages::MultiLimitOrder_Order >&
      orders() const;

  // optional bool cancelAllPreviousLimitOrders = 6;
  void clear_cancelallpreviouslimitorders();
  static const int kCancelAllPreviousLimitOrdersFieldNumber = 6;
  bool cancelallpreviouslimitorders() const;
  void set_cancelallpreviouslimitorders(bool value);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.MultiLimitOrder)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::int64 timestamp_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  ::google::protobuf::internal::ArenaStringPtr assetpairid_;
  ::google::protobuf::RepeatedPtrField< ::matching::engine::messages::MultiLimitOrder_Order > orders_;
  bool cancelallpreviouslimitorders_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static MultiLimitOrder* default_instance_;
};
// -------------------------------------------------------------------

class WalletCredentialsReload : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.WalletCredentialsReload) */ {
 public:
  WalletCredentialsReload();
  virtual ~WalletCredentialsReload();

  WalletCredentialsReload(const WalletCredentialsReload& from);

  inline WalletCredentialsReload& operator=(const WalletCredentialsReload& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WalletCredentialsReload& default_instance();

  void Swap(WalletCredentialsReload* other);

  // implements Message ----------------------------------------------

  inline WalletCredentialsReload* New() const { return New(NULL); }

  WalletCredentialsReload* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(WalletCredentialsReload* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 uid = 1;
  void clear_uid();
  static const int kUidFieldNumber = 1;
  ::google::protobuf::int64 uid() const;
  void set_uid(::google::protobuf::int64 value);

  // optional string clientId = 2;
  void clear_clientid();
  static const int kClientIdFieldNumber = 2;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.WalletCredentialsReload)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::int64 uid_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static WalletCredentialsReload* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeToBalanceUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.SubscribeToBalanceUpdate) */ {
 public:
  SubscribeToBalanceUpdate();
  virtual ~SubscribeToBalanceUpdate();

  SubscribeToBalanceUpdate(const SubscribeToBalanceUpdate& from);

  inline SubscribeToBalanceUpdate& operator=(const SubscribeToBalanceUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeToBalanceUpdate& default_instance();

  void Swap(SubscribeToBalanceUpdate* other);

  // implements Message ----------------------------------------------

  inline SubscribeToBalanceUpdate* New() const { return New(NULL); }

  SubscribeToBalanceUpdate* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeToBalanceUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:matching.engine.messages.SubscribeToBalanceUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static SubscribeToBalanceUpdate* default_instance_;
};
// -------------------------------------------------------------------

class BalanceNotification : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.BalanceNotification) */ {
 public:
  BalanceNotification();
  virtual ~BalanceNotification();

  BalanceNotification(const BalanceNotification& from);

  inline BalanceNotification& operator=(const BalanceNotification& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BalanceNotification& default_instance();

  void Swap(BalanceNotification* other);

  // implements Message ----------------------------------------------

  inline BalanceNotification* New() const { return New(NULL); }

  BalanceNotification* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(BalanceNotification* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string clientId = 1;
  void clear_clientid();
  static const int kClientIdFieldNumber = 1;
  const ::std::string& clientid() const;
  void set_clientid(const ::std::string& value);
  void set_clientid(const char* value);
  void set_clientid(const char* value, size_t size);
  ::std::string* mutable_clientid();
  ::std::string* release_clientid();
  void set_allocated_clientid(::std::string* clientid);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.BalanceNotification)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr clientid_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static BalanceNotification* default_instance_;
};
// -------------------------------------------------------------------

class SubscribeToQuotesUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.SubscribeToQuotesUpdate) */ {
 public:
  SubscribeToQuotesUpdate();
  virtual ~SubscribeToQuotesUpdate();

  SubscribeToQuotesUpdate(const SubscribeToQuotesUpdate& from);

  inline SubscribeToQuotesUpdate& operator=(const SubscribeToQuotesUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SubscribeToQuotesUpdate& default_instance();

  void Swap(SubscribeToQuotesUpdate* other);

  // implements Message ----------------------------------------------

  inline SubscribeToQuotesUpdate* New() const { return New(NULL); }

  SubscribeToQuotesUpdate* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(SubscribeToQuotesUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:matching.engine.messages.SubscribeToQuotesUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static SubscribeToQuotesUpdate* default_instance_;
};
// -------------------------------------------------------------------

class QuotesUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:matching.engine.messages.QuotesUpdate) */ {
 public:
  QuotesUpdate();
  virtual ~QuotesUpdate();

  QuotesUpdate(const QuotesUpdate& from);

  inline QuotesUpdate& operator=(const QuotesUpdate& from) {
    CopyFrom(from);
    return *this;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const QuotesUpdate& default_instance();

  void Swap(QuotesUpdate* other);

  // implements Message ----------------------------------------------

  inline QuotesUpdate* New() const { return New(NULL); }

  QuotesUpdate* New(::google::protobuf::Arena* arena) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(QuotesUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string assetId = 1;
  void clear_assetid();
  static const int kAssetIdFieldNumber = 1;
  const ::std::string& assetid() const;
  void set_assetid(const ::std::string& value);
  void set_assetid(const char* value);
  void set_assetid(const char* value, size_t size);
  ::std::string* mutable_assetid();
  ::std::string* release_assetid();
  void set_allocated_assetid(::std::string* assetid);

  // optional double price = 2;
  void clear_price();
  static const int kPriceFieldNumber = 2;
  double price() const;
  void set_price(double value);

  // optional double volume = 3;
  void clear_volume();
  static const int kVolumeFieldNumber = 3;
  double volume() const;
  void set_volume(double value);

  // @@protoc_insertion_point(class_scope:matching.engine.messages.QuotesUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  bool _is_default_instance_;
  ::google::protobuf::internal::ArenaStringPtr assetid_;
  double price_;
  double volume_;
  mutable int _cached_size_;
  friend void  protobuf_AddDesc_ProtocolMessages_2eproto();
  friend void protobuf_AssignDesc_ProtocolMessages_2eproto();
  friend void protobuf_ShutdownFile_ProtocolMessages_2eproto();

  void InitAsDefaultInstance();
  static QuotesUpdate* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional int64 uid = 1;
inline void Response::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 Response::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.Response.uid)
  return uid_;
}
inline void Response::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.Response.uid)
}

// optional string bussinesId = 2;
inline void Response::clear_bussinesid() {
  bussinesid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::bussinesid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.Response.bussinesId)
  return bussinesid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_bussinesid(const ::std::string& value) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.Response.bussinesId)
}
inline void Response::set_bussinesid(const char* value) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.Response.bussinesId)
}
inline void Response::set_bussinesid(const char* value, size_t size) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.Response.bussinesId)
}
inline ::std::string* Response::mutable_bussinesid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.Response.bussinesId)
  return bussinesid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_bussinesid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.Response.bussinesId)
  
  return bussinesid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_bussinesid(::std::string* bussinesid) {
  if (bussinesid != NULL) {
    
  } else {
    
  }
  bussinesid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bussinesid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.Response.bussinesId)
}

// optional string recordId = 3;
inline void Response::clear_recordid() {
  recordid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Response::recordid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.Response.recordId)
  return recordid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_recordid(const ::std::string& value) {
  
  recordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.Response.recordId)
}
inline void Response::set_recordid(const char* value) {
  
  recordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.Response.recordId)
}
inline void Response::set_recordid(const char* value, size_t size) {
  
  recordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.Response.recordId)
}
inline ::std::string* Response::mutable_recordid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.Response.recordId)
  return recordid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Response::release_recordid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.Response.recordId)
  
  return recordid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Response::set_allocated_recordid(::std::string* recordid) {
  if (recordid != NULL) {
    
  } else {
    
  }
  recordid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recordid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.Response.recordId)
}

// -------------------------------------------------------------------

// CashOperation

// optional int64 uid = 1;
inline void CashOperation::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CashOperation::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.uid)
  return uid_;
}
inline void CashOperation::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.uid)
}

// optional string clientId = 2;
inline void CashOperation::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CashOperation::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CashOperation::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.clientId)
}
inline void CashOperation::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.CashOperation.clientId)
}
inline void CashOperation::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.CashOperation.clientId)
}
inline ::std::string* CashOperation::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.CashOperation.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CashOperation::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.CashOperation.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CashOperation::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.CashOperation.clientId)
}

// optional int64 dateTime = 3;
inline void CashOperation::clear_datetime() {
  datetime_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 CashOperation::datetime() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.dateTime)
  return datetime_;
}
inline void CashOperation::set_datetime(::google::protobuf::int64 value) {
  
  datetime_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.dateTime)
}

// optional string assetId = 4;
inline void CashOperation::clear_assetid() {
  assetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CashOperation::assetid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.assetId)
  return assetid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CashOperation::set_assetid(const ::std::string& value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.assetId)
}
inline void CashOperation::set_assetid(const char* value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.CashOperation.assetId)
}
inline void CashOperation::set_assetid(const char* value, size_t size) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.CashOperation.assetId)
}
inline ::std::string* CashOperation::mutable_assetid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.CashOperation.assetId)
  return assetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CashOperation::release_assetid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.CashOperation.assetId)
  
  return assetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CashOperation::set_allocated_assetid(::std::string* assetid) {
  if (assetid != NULL) {
    
  } else {
    
  }
  assetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.CashOperation.assetId)
}

// optional double amount = 5;
inline void CashOperation::clear_amount() {
  amount_ = 0;
}
inline double CashOperation::amount() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.amount)
  return amount_;
}
inline void CashOperation::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.amount)
}

// optional string bussinesId = 6;
inline void CashOperation::clear_bussinesid() {
  bussinesid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CashOperation::bussinesid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.bussinesId)
  return bussinesid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CashOperation::set_bussinesid(const ::std::string& value) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.bussinesId)
}
inline void CashOperation::set_bussinesid(const char* value) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.CashOperation.bussinesId)
}
inline void CashOperation::set_bussinesid(const char* value, size_t size) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.CashOperation.bussinesId)
}
inline ::std::string* CashOperation::mutable_bussinesid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.CashOperation.bussinesId)
  return bussinesid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CashOperation::release_bussinesid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.CashOperation.bussinesId)
  
  return bussinesid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CashOperation::set_allocated_bussinesid(::std::string* bussinesid) {
  if (bussinesid != NULL) {
    
  } else {
    
  }
  bussinesid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bussinesid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.CashOperation.bussinesId)
}

// optional bool sendToBitcoin = 7;
inline void CashOperation::clear_sendtobitcoin() {
  sendtobitcoin_ = false;
}
inline bool CashOperation::sendtobitcoin() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.sendToBitcoin)
  return sendtobitcoin_;
}
inline void CashOperation::set_sendtobitcoin(bool value) {
  
  sendtobitcoin_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.sendToBitcoin)
}

// -------------------------------------------------------------------

// LimitOrder

// optional int64 uid = 1;
inline void LimitOrder::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LimitOrder::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.uid)
  return uid_;
}
inline void LimitOrder::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.uid)
}

// optional int64 timestamp = 2;
inline void LimitOrder::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LimitOrder::timestamp() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.timestamp)
  return timestamp_;
}
inline void LimitOrder::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.timestamp)
}

// optional string clientId = 3;
inline void LimitOrder::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LimitOrder::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LimitOrder::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.clientId)
}
inline void LimitOrder::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.LimitOrder.clientId)
}
inline void LimitOrder::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.LimitOrder.clientId)
}
inline ::std::string* LimitOrder::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.LimitOrder.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LimitOrder::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.LimitOrder.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LimitOrder::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.LimitOrder.clientId)
}

// optional string assetPairId = 4;
inline void LimitOrder::clear_assetpairid() {
  assetpairid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LimitOrder::assetpairid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.assetPairId)
  return assetpairid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LimitOrder::set_assetpairid(const ::std::string& value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.assetPairId)
}
inline void LimitOrder::set_assetpairid(const char* value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.LimitOrder.assetPairId)
}
inline void LimitOrder::set_assetpairid(const char* value, size_t size) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.LimitOrder.assetPairId)
}
inline ::std::string* LimitOrder::mutable_assetpairid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.LimitOrder.assetPairId)
  return assetpairid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LimitOrder::release_assetpairid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.LimitOrder.assetPairId)
  
  return assetpairid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LimitOrder::set_allocated_assetpairid(::std::string* assetpairid) {
  if (assetpairid != NULL) {
    
  } else {
    
  }
  assetpairid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetpairid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.LimitOrder.assetPairId)
}

// optional double volume = 5;
inline void LimitOrder::clear_volume() {
  volume_ = 0;
}
inline double LimitOrder::volume() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.volume)
  return volume_;
}
inline void LimitOrder::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.volume)
}

// optional double price = 6;
inline void LimitOrder::clear_price() {
  price_ = 0;
}
inline double LimitOrder::price() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.price)
  return price_;
}
inline void LimitOrder::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.price)
}

// optional bool cancelAllPreviousLimitOrders = 7;
inline void LimitOrder::clear_cancelallpreviouslimitorders() {
  cancelallpreviouslimitorders_ = false;
}
inline bool LimitOrder::cancelallpreviouslimitorders() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.cancelAllPreviousLimitOrders)
  return cancelallpreviouslimitorders_;
}
inline void LimitOrder::set_cancelallpreviouslimitorders(bool value) {
  
  cancelallpreviouslimitorders_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.cancelAllPreviousLimitOrders)
}

// -------------------------------------------------------------------

// MarketOrder

// optional int64 uid = 1;
inline void MarketOrder::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketOrder::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.uid)
  return uid_;
}
inline void MarketOrder::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.uid)
}

// optional int64 timestamp = 2;
inline void MarketOrder::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MarketOrder::timestamp() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.timestamp)
  return timestamp_;
}
inline void MarketOrder::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.timestamp)
}

// optional string clientId = 3;
inline void MarketOrder::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketOrder::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketOrder::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.clientId)
}
inline void MarketOrder::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.MarketOrder.clientId)
}
inline void MarketOrder::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.MarketOrder.clientId)
}
inline ::std::string* MarketOrder::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MarketOrder.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketOrder::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.MarketOrder.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketOrder::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.MarketOrder.clientId)
}

// optional string assetPairId = 4;
inline void MarketOrder::clear_assetpairid() {
  assetpairid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MarketOrder::assetpairid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.assetPairId)
  return assetpairid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketOrder::set_assetpairid(const ::std::string& value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.assetPairId)
}
inline void MarketOrder::set_assetpairid(const char* value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.MarketOrder.assetPairId)
}
inline void MarketOrder::set_assetpairid(const char* value, size_t size) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.MarketOrder.assetPairId)
}
inline ::std::string* MarketOrder::mutable_assetpairid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MarketOrder.assetPairId)
  return assetpairid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MarketOrder::release_assetpairid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.MarketOrder.assetPairId)
  
  return assetpairid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MarketOrder::set_allocated_assetpairid(::std::string* assetpairid) {
  if (assetpairid != NULL) {
    
  } else {
    
  }
  assetpairid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetpairid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.MarketOrder.assetPairId)
}

// optional double volume = 5;
inline void MarketOrder::clear_volume() {
  volume_ = 0;
}
inline double MarketOrder::volume() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.volume)
  return volume_;
}
inline void MarketOrder::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.volume)
}

// optional bool straight = 6;
inline void MarketOrder::clear_straight() {
  straight_ = false;
}
inline bool MarketOrder::straight() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.straight)
  return straight_;
}
inline void MarketOrder::set_straight(bool value) {
  
  straight_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.straight)
}

// -------------------------------------------------------------------

// LimitOrderCancel

// optional int64 uid = 1;
inline void LimitOrderCancel::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LimitOrderCancel::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrderCancel.uid)
  return uid_;
}
inline void LimitOrderCancel::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrderCancel.uid)
}

// optional int64 limitOrderId = 2;
inline void LimitOrderCancel::clear_limitorderid() {
  limitorderid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 LimitOrderCancel::limitorderid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrderCancel.limitOrderId)
  return limitorderid_;
}
inline void LimitOrderCancel::set_limitorderid(::google::protobuf::int64 value) {
  
  limitorderid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrderCancel.limitOrderId)
}

// -------------------------------------------------------------------

// BalanceUpdate

// optional int64 uid = 1;
inline void BalanceUpdate::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 BalanceUpdate::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceUpdate.uid)
  return uid_;
}
inline void BalanceUpdate::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceUpdate.uid)
}

// optional string clientId = 2;
inline void BalanceUpdate::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BalanceUpdate::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceUpdate.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BalanceUpdate::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceUpdate.clientId)
}
inline void BalanceUpdate::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.BalanceUpdate.clientId)
}
inline void BalanceUpdate::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.BalanceUpdate.clientId)
}
inline ::std::string* BalanceUpdate::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.BalanceUpdate.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BalanceUpdate::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.BalanceUpdate.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BalanceUpdate::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.BalanceUpdate.clientId)
}

// optional string assetId = 3;
inline void BalanceUpdate::clear_assetid() {
  assetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BalanceUpdate::assetid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceUpdate.assetId)
  return assetid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BalanceUpdate::set_assetid(const ::std::string& value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceUpdate.assetId)
}
inline void BalanceUpdate::set_assetid(const char* value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.BalanceUpdate.assetId)
}
inline void BalanceUpdate::set_assetid(const char* value, size_t size) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.BalanceUpdate.assetId)
}
inline ::std::string* BalanceUpdate::mutable_assetid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.BalanceUpdate.assetId)
  return assetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BalanceUpdate::release_assetid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.BalanceUpdate.assetId)
  
  return assetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BalanceUpdate::set_allocated_assetid(::std::string* assetid) {
  if (assetid != NULL) {
    
  } else {
    
  }
  assetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.BalanceUpdate.assetId)
}

// optional double amount = 4;
inline void BalanceUpdate::clear_amount() {
  amount_ = 0;
}
inline double BalanceUpdate::amount() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceUpdate.amount)
  return amount_;
}
inline void BalanceUpdate::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceUpdate.amount)
}

// -------------------------------------------------------------------

// MultiLimitOrder_Order

// optional double volume = 1;
inline void MultiLimitOrder_Order::clear_volume() {
  volume_ = 0;
}
inline double MultiLimitOrder_Order::volume() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.Order.volume)
  return volume_;
}
inline void MultiLimitOrder_Order::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.Order.volume)
}

// optional double price = 2;
inline void MultiLimitOrder_Order::clear_price() {
  price_ = 0;
}
inline double MultiLimitOrder_Order::price() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.Order.price)
  return price_;
}
inline void MultiLimitOrder_Order::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.Order.price)
}

// -------------------------------------------------------------------

// MultiLimitOrder

// optional int64 uid = 1;
inline void MultiLimitOrder::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MultiLimitOrder::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.uid)
  return uid_;
}
inline void MultiLimitOrder::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.uid)
}

// optional int64 timestamp = 2;
inline void MultiLimitOrder::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 MultiLimitOrder::timestamp() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.timestamp)
  return timestamp_;
}
inline void MultiLimitOrder::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.timestamp)
}

// optional string clientId = 3;
inline void MultiLimitOrder::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiLimitOrder::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiLimitOrder::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.clientId)
}
inline void MultiLimitOrder::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.MultiLimitOrder.clientId)
}
inline void MultiLimitOrder::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.MultiLimitOrder.clientId)
}
inline ::std::string* MultiLimitOrder::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MultiLimitOrder.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiLimitOrder::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.MultiLimitOrder.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiLimitOrder::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.MultiLimitOrder.clientId)
}

// optional string assetPairId = 4;
inline void MultiLimitOrder::clear_assetpairid() {
  assetpairid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& MultiLimitOrder::assetpairid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.assetPairId)
  return assetpairid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiLimitOrder::set_assetpairid(const ::std::string& value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.assetPairId)
}
inline void MultiLimitOrder::set_assetpairid(const char* value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.MultiLimitOrder.assetPairId)
}
inline void MultiLimitOrder::set_assetpairid(const char* value, size_t size) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.MultiLimitOrder.assetPairId)
}
inline ::std::string* MultiLimitOrder::mutable_assetpairid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MultiLimitOrder.assetPairId)
  return assetpairid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* MultiLimitOrder::release_assetpairid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.MultiLimitOrder.assetPairId)
  
  return assetpairid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void MultiLimitOrder::set_allocated_assetpairid(::std::string* assetpairid) {
  if (assetpairid != NULL) {
    
  } else {
    
  }
  assetpairid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetpairid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.MultiLimitOrder.assetPairId)
}

// repeated .matching.engine.messages.MultiLimitOrder.Order orders = 5;
inline int MultiLimitOrder::orders_size() const {
  return orders_.size();
}
inline void MultiLimitOrder::clear_orders() {
  orders_.Clear();
}
inline const ::matching::engine::messages::MultiLimitOrder_Order& MultiLimitOrder::orders(int index) const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.orders)
  return orders_.Get(index);
}
inline ::matching::engine::messages::MultiLimitOrder_Order* MultiLimitOrder::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MultiLimitOrder.orders)
  return orders_.Mutable(index);
}
inline ::matching::engine::messages::MultiLimitOrder_Order* MultiLimitOrder::add_orders() {
  // @@protoc_insertion_point(field_add:matching.engine.messages.MultiLimitOrder.orders)
  return orders_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::matching::engine::messages::MultiLimitOrder_Order >*
MultiLimitOrder::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:matching.engine.messages.MultiLimitOrder.orders)
  return &orders_;
}
inline const ::google::protobuf::RepeatedPtrField< ::matching::engine::messages::MultiLimitOrder_Order >&
MultiLimitOrder::orders() const {
  // @@protoc_insertion_point(field_list:matching.engine.messages.MultiLimitOrder.orders)
  return orders_;
}

// optional bool cancelAllPreviousLimitOrders = 6;
inline void MultiLimitOrder::clear_cancelallpreviouslimitorders() {
  cancelallpreviouslimitorders_ = false;
}
inline bool MultiLimitOrder::cancelallpreviouslimitorders() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.cancelAllPreviousLimitOrders)
  return cancelallpreviouslimitorders_;
}
inline void MultiLimitOrder::set_cancelallpreviouslimitorders(bool value) {
  
  cancelallpreviouslimitorders_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.cancelAllPreviousLimitOrders)
}

// -------------------------------------------------------------------

// WalletCredentialsReload

// optional int64 uid = 1;
inline void WalletCredentialsReload::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
inline ::google::protobuf::int64 WalletCredentialsReload::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.WalletCredentialsReload.uid)
  return uid_;
}
inline void WalletCredentialsReload::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.WalletCredentialsReload.uid)
}

// optional string clientId = 2;
inline void WalletCredentialsReload::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& WalletCredentialsReload::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.WalletCredentialsReload.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WalletCredentialsReload::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.WalletCredentialsReload.clientId)
}
inline void WalletCredentialsReload::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.WalletCredentialsReload.clientId)
}
inline void WalletCredentialsReload::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.WalletCredentialsReload.clientId)
}
inline ::std::string* WalletCredentialsReload::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.WalletCredentialsReload.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* WalletCredentialsReload::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.WalletCredentialsReload.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void WalletCredentialsReload::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.WalletCredentialsReload.clientId)
}

// -------------------------------------------------------------------

// SubscribeToBalanceUpdate

// -------------------------------------------------------------------

// BalanceNotification

// optional string clientId = 1;
inline void BalanceNotification::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& BalanceNotification::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceNotification.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BalanceNotification::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceNotification.clientId)
}
inline void BalanceNotification::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.BalanceNotification.clientId)
}
inline void BalanceNotification::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.BalanceNotification.clientId)
}
inline ::std::string* BalanceNotification::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.BalanceNotification.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* BalanceNotification::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.BalanceNotification.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void BalanceNotification::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.BalanceNotification.clientId)
}

// -------------------------------------------------------------------

// SubscribeToQuotesUpdate

// -------------------------------------------------------------------

// QuotesUpdate

// optional string assetId = 1;
inline void QuotesUpdate::clear_assetid() {
  assetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& QuotesUpdate::assetid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.QuotesUpdate.assetId)
  return assetid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuotesUpdate::set_assetid(const ::std::string& value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.QuotesUpdate.assetId)
}
inline void QuotesUpdate::set_assetid(const char* value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.QuotesUpdate.assetId)
}
inline void QuotesUpdate::set_assetid(const char* value, size_t size) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.QuotesUpdate.assetId)
}
inline ::std::string* QuotesUpdate::mutable_assetid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.QuotesUpdate.assetId)
  return assetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* QuotesUpdate::release_assetid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.QuotesUpdate.assetId)
  
  return assetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void QuotesUpdate::set_allocated_assetid(::std::string* assetid) {
  if (assetid != NULL) {
    
  } else {
    
  }
  assetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.QuotesUpdate.assetId)
}

// optional double price = 2;
inline void QuotesUpdate::clear_price() {
  price_ = 0;
}
inline double QuotesUpdate::price() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.QuotesUpdate.price)
  return price_;
}
inline void QuotesUpdate::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.QuotesUpdate.price)
}

// optional double volume = 3;
inline void QuotesUpdate::clear_volume() {
  volume_ = 0;
}
inline double QuotesUpdate::volume() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.QuotesUpdate.volume)
  return volume_;
}
inline void QuotesUpdate::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.QuotesUpdate.volume)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace engine
}  // namespace matching

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtocolMessages_2eproto__INCLUDED
