// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtocolMessages.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ProtocolMessages.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace matching {
namespace engine {
namespace messages {

namespace {

const ::google::protobuf::Descriptor* Response_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Response_reflection_ = NULL;
const ::google::protobuf::Descriptor* CashOperation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CashOperation_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimitOrderCancel_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitOrderCancel_reflection_ = NULL;
const ::google::protobuf::Descriptor* BalanceUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BalanceUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiLimitOrder_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiLimitOrder_reflection_ = NULL;
const ::google::protobuf::Descriptor* MultiLimitOrder_Order_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MultiLimitOrder_Order_reflection_ = NULL;
const ::google::protobuf::Descriptor* WalletCredentialsReload_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WalletCredentialsReload_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeToBalanceUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeToBalanceUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* BalanceNotification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BalanceNotification_reflection_ = NULL;
const ::google::protobuf::Descriptor* SubscribeToQuotesUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SubscribeToQuotesUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuotesUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuotesUpdate_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ProtocolMessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_ProtocolMessages_2eproto() {
  protobuf_AddDesc_ProtocolMessages_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ProtocolMessages.proto");
  GOOGLE_CHECK(file != NULL);
  Response_descriptor_ = file->message_type(0);
  static const int Response_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, bussinesid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, recordid_),
  };
  Response_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Response_descriptor_,
      Response::default_instance_,
      Response_offsets_,
      -1,
      -1,
      -1,
      sizeof(Response),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Response, _is_default_instance_));
  CashOperation_descriptor_ = file->message_type(1);
  static const int CashOperation_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashOperation, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashOperation, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashOperation, datetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashOperation, assetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashOperation, amount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashOperation, bussinesid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashOperation, sendtobitcoin_),
  };
  CashOperation_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CashOperation_descriptor_,
      CashOperation::default_instance_,
      CashOperation_offsets_,
      -1,
      -1,
      -1,
      sizeof(CashOperation),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashOperation, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CashOperation, _is_default_instance_));
  LimitOrder_descriptor_ = file->message_type(2);
  static const int LimitOrder_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrder, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrder, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrder, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrder, assetpairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrder, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrder, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrder, cancelallpreviouslimitorders_),
  };
  LimitOrder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LimitOrder_descriptor_,
      LimitOrder::default_instance_,
      LimitOrder_offsets_,
      -1,
      -1,
      -1,
      sizeof(LimitOrder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrder, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrder, _is_default_instance_));
  MarketOrder_descriptor_ = file->message_type(3);
  static const int MarketOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketOrder, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketOrder, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketOrder, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketOrder, assetpairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketOrder, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketOrder, straight_),
  };
  MarketOrder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MarketOrder_descriptor_,
      MarketOrder::default_instance_,
      MarketOrder_offsets_,
      -1,
      -1,
      -1,
      sizeof(MarketOrder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketOrder, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketOrder, _is_default_instance_));
  LimitOrderCancel_descriptor_ = file->message_type(4);
  static const int LimitOrderCancel_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrderCancel, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrderCancel, limitorderid_),
  };
  LimitOrderCancel_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      LimitOrderCancel_descriptor_,
      LimitOrderCancel::default_instance_,
      LimitOrderCancel_offsets_,
      -1,
      -1,
      -1,
      sizeof(LimitOrderCancel),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrderCancel, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitOrderCancel, _is_default_instance_));
  BalanceUpdate_descriptor_ = file->message_type(5);
  static const int BalanceUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceUpdate, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceUpdate, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceUpdate, assetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceUpdate, amount_),
  };
  BalanceUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BalanceUpdate_descriptor_,
      BalanceUpdate::default_instance_,
      BalanceUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(BalanceUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceUpdate, _is_default_instance_));
  MultiLimitOrder_descriptor_ = file->message_type(6);
  static const int MultiLimitOrder_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder, clientid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder, assetpairid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder, orders_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder, cancelallpreviouslimitorders_),
  };
  MultiLimitOrder_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiLimitOrder_descriptor_,
      MultiLimitOrder::default_instance_,
      MultiLimitOrder_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiLimitOrder),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder, _is_default_instance_));
  MultiLimitOrder_Order_descriptor_ = MultiLimitOrder_descriptor_->nested_type(0);
  static const int MultiLimitOrder_Order_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder_Order, volume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder_Order, price_),
  };
  MultiLimitOrder_Order_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MultiLimitOrder_Order_descriptor_,
      MultiLimitOrder_Order::default_instance_,
      MultiLimitOrder_Order_offsets_,
      -1,
      -1,
      -1,
      sizeof(MultiLimitOrder_Order),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder_Order, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MultiLimitOrder_Order, _is_default_instance_));
  WalletCredentialsReload_descriptor_ = file->message_type(7);
  static const int WalletCredentialsReload_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalletCredentialsReload, uid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalletCredentialsReload, clientid_),
  };
  WalletCredentialsReload_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      WalletCredentialsReload_descriptor_,
      WalletCredentialsReload::default_instance_,
      WalletCredentialsReload_offsets_,
      -1,
      -1,
      -1,
      sizeof(WalletCredentialsReload),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalletCredentialsReload, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WalletCredentialsReload, _is_default_instance_));
  SubscribeToBalanceUpdate_descriptor_ = file->message_type(8);
  static const int SubscribeToBalanceUpdate_offsets_[1] = {
  };
  SubscribeToBalanceUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeToBalanceUpdate_descriptor_,
      SubscribeToBalanceUpdate::default_instance_,
      SubscribeToBalanceUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeToBalanceUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToBalanceUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToBalanceUpdate, _is_default_instance_));
  BalanceNotification_descriptor_ = file->message_type(9);
  static const int BalanceNotification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceNotification, clientid_),
  };
  BalanceNotification_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      BalanceNotification_descriptor_,
      BalanceNotification::default_instance_,
      BalanceNotification_offsets_,
      -1,
      -1,
      -1,
      sizeof(BalanceNotification),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceNotification, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BalanceNotification, _is_default_instance_));
  SubscribeToQuotesUpdate_descriptor_ = file->message_type(10);
  static const int SubscribeToQuotesUpdate_offsets_[1] = {
  };
  SubscribeToQuotesUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      SubscribeToQuotesUpdate_descriptor_,
      SubscribeToQuotesUpdate::default_instance_,
      SubscribeToQuotesUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(SubscribeToQuotesUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToQuotesUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SubscribeToQuotesUpdate, _is_default_instance_));
  QuotesUpdate_descriptor_ = file->message_type(11);
  static const int QuotesUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotesUpdate, assetid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotesUpdate, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotesUpdate, volume_),
  };
  QuotesUpdate_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      QuotesUpdate_descriptor_,
      QuotesUpdate::default_instance_,
      QuotesUpdate_offsets_,
      -1,
      -1,
      -1,
      sizeof(QuotesUpdate),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotesUpdate, _internal_metadata_),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuotesUpdate, _is_default_instance_));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ProtocolMessages_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Response_descriptor_, &Response::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CashOperation_descriptor_, &CashOperation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LimitOrder_descriptor_, &LimitOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MarketOrder_descriptor_, &MarketOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      LimitOrderCancel_descriptor_, &LimitOrderCancel::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BalanceUpdate_descriptor_, &BalanceUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiLimitOrder_descriptor_, &MultiLimitOrder::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MultiLimitOrder_Order_descriptor_, &MultiLimitOrder_Order::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      WalletCredentialsReload_descriptor_, &WalletCredentialsReload::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeToBalanceUpdate_descriptor_, &SubscribeToBalanceUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      BalanceNotification_descriptor_, &BalanceNotification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      SubscribeToQuotesUpdate_descriptor_, &SubscribeToQuotesUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      QuotesUpdate_descriptor_, &QuotesUpdate::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ProtocolMessages_2eproto() {
  delete Response::default_instance_;
  delete Response_reflection_;
  delete CashOperation::default_instance_;
  delete CashOperation_reflection_;
  delete LimitOrder::default_instance_;
  delete LimitOrder_reflection_;
  delete MarketOrder::default_instance_;
  delete MarketOrder_reflection_;
  delete LimitOrderCancel::default_instance_;
  delete LimitOrderCancel_reflection_;
  delete BalanceUpdate::default_instance_;
  delete BalanceUpdate_reflection_;
  delete MultiLimitOrder::default_instance_;
  delete MultiLimitOrder_reflection_;
  delete MultiLimitOrder_Order::default_instance_;
  delete MultiLimitOrder_Order_reflection_;
  delete WalletCredentialsReload::default_instance_;
  delete WalletCredentialsReload_reflection_;
  delete SubscribeToBalanceUpdate::default_instance_;
  delete SubscribeToBalanceUpdate_reflection_;
  delete BalanceNotification::default_instance_;
  delete BalanceNotification_reflection_;
  delete SubscribeToQuotesUpdate::default_instance_;
  delete SubscribeToQuotesUpdate_reflection_;
  delete QuotesUpdate::default_instance_;
  delete QuotesUpdate_reflection_;
}

void protobuf_AddDesc_ProtocolMessages_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_ProtocolMessages_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026ProtocolMessages.proto\022\030matching.engin"
    "e.messages\"=\n\010Response\022\013\n\003uid\030\001 \001(\003\022\022\n\nb"
    "ussinesId\030\002 \001(\t\022\020\n\010recordId\030\003 \001(\t\"\214\001\n\rCa"
    "shOperation\022\013\n\003uid\030\001 \001(\003\022\020\n\010clientId\030\002 \001"
    "(\t\022\020\n\010dateTime\030\003 \001(\003\022\017\n\007assetId\030\004 \001(\t\022\016\n"
    "\006amount\030\005 \001(\001\022\022\n\nbussinesId\030\006 \001(\t\022\025\n\rsen"
    "dToBitcoin\030\007 \001(\010\"\230\001\n\nLimitOrder\022\013\n\003uid\030\001"
    " \001(\003\022\021\n\ttimestamp\030\002 \001(\003\022\020\n\010clientId\030\003 \001("
    "\t\022\023\n\013assetPairId\030\004 \001(\t\022\016\n\006volume\030\005 \001(\001\022\r"
    "\n\005price\030\006 \001(\001\022$\n\034cancelAllPreviousLimitO"
    "rders\030\007 \001(\010\"v\n\013MarketOrder\022\013\n\003uid\030\001 \001(\003\022"
    "\021\n\ttimestamp\030\002 \001(\003\022\020\n\010clientId\030\003 \001(\t\022\023\n\013"
    "assetPairId\030\004 \001(\t\022\016\n\006volume\030\005 \001(\001\022\020\n\010str"
    "aight\030\006 \001(\010\"5\n\020LimitOrderCancel\022\013\n\003uid\030\001"
    " \001(\003\022\024\n\014limitOrderId\030\002 \001(\003\"O\n\rBalanceUpd"
    "ate\022\013\n\003uid\030\001 \001(\003\022\020\n\010clientId\030\002 \001(\t\022\017\n\007as"
    "setId\030\003 \001(\t\022\016\n\006amount\030\004 \001(\001\"\347\001\n\017MultiLim"
    "itOrder\022\013\n\003uid\030\001 \001(\003\022\021\n\ttimestamp\030\002 \001(\003\022"
    "\020\n\010clientId\030\003 \001(\t\022\023\n\013assetPairId\030\004 \001(\t\022\?"
    "\n\006orders\030\005 \003(\0132/.matching.engine.message"
    "s.MultiLimitOrder.Order\022$\n\034cancelAllPrev"
    "iousLimitOrders\030\006 \001(\010\032&\n\005Order\022\016\n\006volume"
    "\030\001 \001(\001\022\r\n\005price\030\002 \001(\001\"8\n\027WalletCredentia"
    "lsReload\022\013\n\003uid\030\001 \001(\003\022\020\n\010clientId\030\002 \001(\t\""
    "\032\n\030SubscribeToBalanceUpdate\"\'\n\023BalanceNo"
    "tification\022\020\n\010clientId\030\001 \001(\t\"\031\n\027Subscrib"
    "eToQuotesUpdate\">\n\014QuotesUpdate\022\017\n\007asset"
    "Id\030\001 \001(\t\022\r\n\005price\030\002 \001(\001\022\016\n\006volume\030\003 \001(\001B"
    "\002H\002b\006proto3", 1131);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ProtocolMessages.proto", &protobuf_RegisterTypes);
  Response::default_instance_ = new Response();
  CashOperation::default_instance_ = new CashOperation();
  LimitOrder::default_instance_ = new LimitOrder();
  MarketOrder::default_instance_ = new MarketOrder();
  LimitOrderCancel::default_instance_ = new LimitOrderCancel();
  BalanceUpdate::default_instance_ = new BalanceUpdate();
  MultiLimitOrder::default_instance_ = new MultiLimitOrder();
  MultiLimitOrder_Order::default_instance_ = new MultiLimitOrder_Order();
  WalletCredentialsReload::default_instance_ = new WalletCredentialsReload();
  SubscribeToBalanceUpdate::default_instance_ = new SubscribeToBalanceUpdate();
  BalanceNotification::default_instance_ = new BalanceNotification();
  SubscribeToQuotesUpdate::default_instance_ = new SubscribeToQuotesUpdate();
  QuotesUpdate::default_instance_ = new QuotesUpdate();
  Response::default_instance_->InitAsDefaultInstance();
  CashOperation::default_instance_->InitAsDefaultInstance();
  LimitOrder::default_instance_->InitAsDefaultInstance();
  MarketOrder::default_instance_->InitAsDefaultInstance();
  LimitOrderCancel::default_instance_->InitAsDefaultInstance();
  BalanceUpdate::default_instance_->InitAsDefaultInstance();
  MultiLimitOrder::default_instance_->InitAsDefaultInstance();
  MultiLimitOrder_Order::default_instance_->InitAsDefaultInstance();
  WalletCredentialsReload::default_instance_->InitAsDefaultInstance();
  SubscribeToBalanceUpdate::default_instance_->InitAsDefaultInstance();
  BalanceNotification::default_instance_->InitAsDefaultInstance();
  SubscribeToQuotesUpdate::default_instance_->InitAsDefaultInstance();
  QuotesUpdate::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ProtocolMessages_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ProtocolMessages_2eproto {
  StaticDescriptorInitializer_ProtocolMessages_2eproto() {
    protobuf_AddDesc_ProtocolMessages_2eproto();
  }
} static_descriptor_initializer_ProtocolMessages_2eproto_;

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Response::kUidFieldNumber;
const int Response::kBussinesIdFieldNumber;
const int Response::kRecordIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Response::Response()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.Response)
}

void Response::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

Response::Response(const Response& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.Response)
}

void Response::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  bussinesid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

Response::~Response() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.Response)
  SharedDtor();
}

void Response::SharedDtor() {
  bussinesid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  recordid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void Response::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Response::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Response_descriptor_;
}

const Response& Response::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

Response* Response::default_instance_ = NULL;

Response* Response::New(::google::protobuf::Arena* arena) const {
  Response* n = new Response;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Response::Swap(Response* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Response::InternalSwap(Response* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata Response::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Response_descriptor_;
  metadata.reflection = Response_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Response

// optional int64 uid = 1;
void Response::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 Response::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.Response.uid)
  return uid_;
}
 void Response::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.Response.uid)
}

// optional string bussinesId = 2;
void Response::clear_bussinesid() {
  bussinesid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Response::bussinesid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.Response.bussinesId)
  return bussinesid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_bussinesid(const ::std::string& value) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.Response.bussinesId)
}
 void Response::set_bussinesid(const char* value) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.Response.bussinesId)
}
 void Response::set_bussinesid(const char* value, size_t size) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.Response.bussinesId)
}
 ::std::string* Response::mutable_bussinesid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.Response.bussinesId)
  return bussinesid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_bussinesid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.Response.bussinesId)
  
  return bussinesid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_bussinesid(::std::string* bussinesid) {
  if (bussinesid != NULL) {
    
  } else {
    
  }
  bussinesid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bussinesid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.Response.bussinesId)
}

// optional string recordId = 3;
void Response::clear_recordid() {
  recordid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& Response::recordid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.Response.recordId)
  return recordid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_recordid(const ::std::string& value) {
  
  recordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.Response.recordId)
}
 void Response::set_recordid(const char* value) {
  
  recordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.Response.recordId)
}
 void Response::set_recordid(const char* value, size_t size) {
  
  recordid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.Response.recordId)
}
 ::std::string* Response::mutable_recordid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.Response.recordId)
  return recordid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* Response::release_recordid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.Response.recordId)
  
  return recordid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void Response::set_allocated_recordid(::std::string* recordid) {
  if (recordid != NULL) {
    
  } else {
    
  }
  recordid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), recordid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.Response.recordId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CashOperation::kUidFieldNumber;
const int CashOperation::kClientIdFieldNumber;
const int CashOperation::kDateTimeFieldNumber;
const int CashOperation::kAssetIdFieldNumber;
const int CashOperation::kAmountFieldNumber;
const int CashOperation::kBussinesIdFieldNumber;
const int CashOperation::kSendToBitcoinFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CashOperation::CashOperation()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.CashOperation)
}

void CashOperation::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

CashOperation::CashOperation(const CashOperation& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.CashOperation)
}

void CashOperation::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  datetime_ = GOOGLE_LONGLONG(0);
  assetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
  bussinesid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sendtobitcoin_ = false;
}

CashOperation::~CashOperation() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.CashOperation)
  SharedDtor();
}

void CashOperation::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  bussinesid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void CashOperation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CashOperation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CashOperation_descriptor_;
}

const CashOperation& CashOperation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

CashOperation* CashOperation::default_instance_ = NULL;

CashOperation* CashOperation::New(::google::protobuf::Arena* arena) const {
  CashOperation* n = new CashOperation;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CashOperation::Swap(CashOperation* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CashOperation::InternalSwap(CashOperation* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata CashOperation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CashOperation_descriptor_;
  metadata.reflection = CashOperation_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CashOperation

// optional int64 uid = 1;
void CashOperation::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CashOperation::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.uid)
  return uid_;
}
 void CashOperation::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.uid)
}

// optional string clientId = 2;
void CashOperation::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CashOperation::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CashOperation::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.clientId)
}
 void CashOperation::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.CashOperation.clientId)
}
 void CashOperation::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.CashOperation.clientId)
}
 ::std::string* CashOperation::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.CashOperation.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CashOperation::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.CashOperation.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CashOperation::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.CashOperation.clientId)
}

// optional int64 dateTime = 3;
void CashOperation::clear_datetime() {
  datetime_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 CashOperation::datetime() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.dateTime)
  return datetime_;
}
 void CashOperation::set_datetime(::google::protobuf::int64 value) {
  
  datetime_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.dateTime)
}

// optional string assetId = 4;
void CashOperation::clear_assetid() {
  assetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CashOperation::assetid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.assetId)
  return assetid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CashOperation::set_assetid(const ::std::string& value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.assetId)
}
 void CashOperation::set_assetid(const char* value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.CashOperation.assetId)
}
 void CashOperation::set_assetid(const char* value, size_t size) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.CashOperation.assetId)
}
 ::std::string* CashOperation::mutable_assetid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.CashOperation.assetId)
  return assetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CashOperation::release_assetid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.CashOperation.assetId)
  
  return assetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CashOperation::set_allocated_assetid(::std::string* assetid) {
  if (assetid != NULL) {
    
  } else {
    
  }
  assetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.CashOperation.assetId)
}

// optional double amount = 5;
void CashOperation::clear_amount() {
  amount_ = 0;
}
 double CashOperation::amount() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.amount)
  return amount_;
}
 void CashOperation::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.amount)
}

// optional string bussinesId = 6;
void CashOperation::clear_bussinesid() {
  bussinesid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& CashOperation::bussinesid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.bussinesId)
  return bussinesid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CashOperation::set_bussinesid(const ::std::string& value) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.bussinesId)
}
 void CashOperation::set_bussinesid(const char* value) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.CashOperation.bussinesId)
}
 void CashOperation::set_bussinesid(const char* value, size_t size) {
  
  bussinesid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.CashOperation.bussinesId)
}
 ::std::string* CashOperation::mutable_bussinesid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.CashOperation.bussinesId)
  return bussinesid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CashOperation::release_bussinesid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.CashOperation.bussinesId)
  
  return bussinesid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CashOperation::set_allocated_bussinesid(::std::string* bussinesid) {
  if (bussinesid != NULL) {
    
  } else {
    
  }
  bussinesid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), bussinesid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.CashOperation.bussinesId)
}

// optional bool sendToBitcoin = 7;
void CashOperation::clear_sendtobitcoin() {
  sendtobitcoin_ = false;
}
 bool CashOperation::sendtobitcoin() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.CashOperation.sendToBitcoin)
  return sendtobitcoin_;
}
 void CashOperation::set_sendtobitcoin(bool value) {
  
  sendtobitcoin_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.CashOperation.sendToBitcoin)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LimitOrder::kUidFieldNumber;
const int LimitOrder::kTimestampFieldNumber;
const int LimitOrder::kClientIdFieldNumber;
const int LimitOrder::kAssetPairIdFieldNumber;
const int LimitOrder::kVolumeFieldNumber;
const int LimitOrder::kPriceFieldNumber;
const int LimitOrder::kCancelAllPreviousLimitOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LimitOrder::LimitOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.LimitOrder)
}

void LimitOrder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LimitOrder::LimitOrder(const LimitOrder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.LimitOrder)
}

void LimitOrder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetpairid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_ = 0;
  price_ = 0;
  cancelallpreviouslimitorders_ = false;
}

LimitOrder::~LimitOrder() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.LimitOrder)
  SharedDtor();
}

void LimitOrder::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetpairid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void LimitOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitOrder_descriptor_;
}

const LimitOrder& LimitOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

LimitOrder* LimitOrder::default_instance_ = NULL;

LimitOrder* LimitOrder::New(::google::protobuf::Arena* arena) const {
  LimitOrder* n = new LimitOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LimitOrder::Swap(LimitOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LimitOrder::InternalSwap(LimitOrder* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata LimitOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitOrder_descriptor_;
  metadata.reflection = LimitOrder_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LimitOrder

// optional int64 uid = 1;
void LimitOrder::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LimitOrder::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.uid)
  return uid_;
}
 void LimitOrder::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.uid)
}

// optional int64 timestamp = 2;
void LimitOrder::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LimitOrder::timestamp() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.timestamp)
  return timestamp_;
}
 void LimitOrder::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.timestamp)
}

// optional string clientId = 3;
void LimitOrder::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LimitOrder::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LimitOrder::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.clientId)
}
 void LimitOrder::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.LimitOrder.clientId)
}
 void LimitOrder::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.LimitOrder.clientId)
}
 ::std::string* LimitOrder::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.LimitOrder.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LimitOrder::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.LimitOrder.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LimitOrder::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.LimitOrder.clientId)
}

// optional string assetPairId = 4;
void LimitOrder::clear_assetpairid() {
  assetpairid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& LimitOrder::assetpairid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.assetPairId)
  return assetpairid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LimitOrder::set_assetpairid(const ::std::string& value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.assetPairId)
}
 void LimitOrder::set_assetpairid(const char* value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.LimitOrder.assetPairId)
}
 void LimitOrder::set_assetpairid(const char* value, size_t size) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.LimitOrder.assetPairId)
}
 ::std::string* LimitOrder::mutable_assetpairid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.LimitOrder.assetPairId)
  return assetpairid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* LimitOrder::release_assetpairid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.LimitOrder.assetPairId)
  
  return assetpairid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void LimitOrder::set_allocated_assetpairid(::std::string* assetpairid) {
  if (assetpairid != NULL) {
    
  } else {
    
  }
  assetpairid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetpairid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.LimitOrder.assetPairId)
}

// optional double volume = 5;
void LimitOrder::clear_volume() {
  volume_ = 0;
}
 double LimitOrder::volume() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.volume)
  return volume_;
}
 void LimitOrder::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.volume)
}

// optional double price = 6;
void LimitOrder::clear_price() {
  price_ = 0;
}
 double LimitOrder::price() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.price)
  return price_;
}
 void LimitOrder::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.price)
}

// optional bool cancelAllPreviousLimitOrders = 7;
void LimitOrder::clear_cancelallpreviouslimitorders() {
  cancelallpreviouslimitorders_ = false;
}
 bool LimitOrder::cancelallpreviouslimitorders() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrder.cancelAllPreviousLimitOrders)
  return cancelallpreviouslimitorders_;
}
 void LimitOrder::set_cancelallpreviouslimitorders(bool value) {
  
  cancelallpreviouslimitorders_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrder.cancelAllPreviousLimitOrders)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MarketOrder::kUidFieldNumber;
const int MarketOrder::kTimestampFieldNumber;
const int MarketOrder::kClientIdFieldNumber;
const int MarketOrder::kAssetPairIdFieldNumber;
const int MarketOrder::kVolumeFieldNumber;
const int MarketOrder::kStraightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MarketOrder::MarketOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.MarketOrder)
}

void MarketOrder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MarketOrder::MarketOrder(const MarketOrder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.MarketOrder)
}

void MarketOrder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetpairid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  volume_ = 0;
  straight_ = false;
}

MarketOrder::~MarketOrder() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.MarketOrder)
  SharedDtor();
}

void MarketOrder::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetpairid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MarketOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketOrder_descriptor_;
}

const MarketOrder& MarketOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

MarketOrder* MarketOrder::default_instance_ = NULL;

MarketOrder* MarketOrder::New(::google::protobuf::Arena* arena) const {
  MarketOrder* n = new MarketOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MarketOrder::Swap(MarketOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MarketOrder::InternalSwap(MarketOrder* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata MarketOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketOrder_descriptor_;
  metadata.reflection = MarketOrder_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MarketOrder

// optional int64 uid = 1;
void MarketOrder::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MarketOrder::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.uid)
  return uid_;
}
 void MarketOrder::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.uid)
}

// optional int64 timestamp = 2;
void MarketOrder::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MarketOrder::timestamp() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.timestamp)
  return timestamp_;
}
 void MarketOrder::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.timestamp)
}

// optional string clientId = 3;
void MarketOrder::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MarketOrder::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketOrder::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.clientId)
}
 void MarketOrder::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.MarketOrder.clientId)
}
 void MarketOrder::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.MarketOrder.clientId)
}
 ::std::string* MarketOrder::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MarketOrder.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MarketOrder::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.MarketOrder.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketOrder::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.MarketOrder.clientId)
}

// optional string assetPairId = 4;
void MarketOrder::clear_assetpairid() {
  assetpairid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MarketOrder::assetpairid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.assetPairId)
  return assetpairid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketOrder::set_assetpairid(const ::std::string& value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.assetPairId)
}
 void MarketOrder::set_assetpairid(const char* value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.MarketOrder.assetPairId)
}
 void MarketOrder::set_assetpairid(const char* value, size_t size) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.MarketOrder.assetPairId)
}
 ::std::string* MarketOrder::mutable_assetpairid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MarketOrder.assetPairId)
  return assetpairid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MarketOrder::release_assetpairid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.MarketOrder.assetPairId)
  
  return assetpairid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MarketOrder::set_allocated_assetpairid(::std::string* assetpairid) {
  if (assetpairid != NULL) {
    
  } else {
    
  }
  assetpairid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetpairid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.MarketOrder.assetPairId)
}

// optional double volume = 5;
void MarketOrder::clear_volume() {
  volume_ = 0;
}
 double MarketOrder::volume() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.volume)
  return volume_;
}
 void MarketOrder::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.volume)
}

// optional bool straight = 6;
void MarketOrder::clear_straight() {
  straight_ = false;
}
 bool MarketOrder::straight() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MarketOrder.straight)
  return straight_;
}
 void MarketOrder::set_straight(bool value) {
  
  straight_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MarketOrder.straight)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LimitOrderCancel::kUidFieldNumber;
const int LimitOrderCancel::kLimitOrderIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LimitOrderCancel::LimitOrderCancel()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.LimitOrderCancel)
}

void LimitOrderCancel::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

LimitOrderCancel::LimitOrderCancel(const LimitOrderCancel& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.LimitOrderCancel)
}

void LimitOrderCancel::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  limitorderid_ = GOOGLE_LONGLONG(0);
}

LimitOrderCancel::~LimitOrderCancel() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.LimitOrderCancel)
  SharedDtor();
}

void LimitOrderCancel::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitOrderCancel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitOrderCancel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitOrderCancel_descriptor_;
}

const LimitOrderCancel& LimitOrderCancel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

LimitOrderCancel* LimitOrderCancel::default_instance_ = NULL;

LimitOrderCancel* LimitOrderCancel::New(::google::protobuf::Arena* arena) const {
  LimitOrderCancel* n = new LimitOrderCancel;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LimitOrderCancel::Swap(LimitOrderCancel* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LimitOrderCancel::InternalSwap(LimitOrderCancel* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata LimitOrderCancel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitOrderCancel_descriptor_;
  metadata.reflection = LimitOrderCancel_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LimitOrderCancel

// optional int64 uid = 1;
void LimitOrderCancel::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LimitOrderCancel::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrderCancel.uid)
  return uid_;
}
 void LimitOrderCancel::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrderCancel.uid)
}

// optional int64 limitOrderId = 2;
void LimitOrderCancel::clear_limitorderid() {
  limitorderid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 LimitOrderCancel::limitorderid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.LimitOrderCancel.limitOrderId)
  return limitorderid_;
}
 void LimitOrderCancel::set_limitorderid(::google::protobuf::int64 value) {
  
  limitorderid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.LimitOrderCancel.limitOrderId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalanceUpdate::kUidFieldNumber;
const int BalanceUpdate::kClientIdFieldNumber;
const int BalanceUpdate::kAssetIdFieldNumber;
const int BalanceUpdate::kAmountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalanceUpdate::BalanceUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.BalanceUpdate)
}

void BalanceUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BalanceUpdate::BalanceUpdate(const BalanceUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.BalanceUpdate)
}

void BalanceUpdate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  amount_ = 0;
}

BalanceUpdate::~BalanceUpdate() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.BalanceUpdate)
  SharedDtor();
}

void BalanceUpdate::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BalanceUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalanceUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BalanceUpdate_descriptor_;
}

const BalanceUpdate& BalanceUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

BalanceUpdate* BalanceUpdate::default_instance_ = NULL;

BalanceUpdate* BalanceUpdate::New(::google::protobuf::Arena* arena) const {
  BalanceUpdate* n = new BalanceUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BalanceUpdate::Swap(BalanceUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalanceUpdate::InternalSwap(BalanceUpdate* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata BalanceUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BalanceUpdate_descriptor_;
  metadata.reflection = BalanceUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BalanceUpdate

// optional int64 uid = 1;
void BalanceUpdate::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 BalanceUpdate::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceUpdate.uid)
  return uid_;
}
 void BalanceUpdate::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceUpdate.uid)
}

// optional string clientId = 2;
void BalanceUpdate::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BalanceUpdate::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceUpdate.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BalanceUpdate::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceUpdate.clientId)
}
 void BalanceUpdate::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.BalanceUpdate.clientId)
}
 void BalanceUpdate::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.BalanceUpdate.clientId)
}
 ::std::string* BalanceUpdate::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.BalanceUpdate.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BalanceUpdate::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.BalanceUpdate.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BalanceUpdate::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.BalanceUpdate.clientId)
}

// optional string assetId = 3;
void BalanceUpdate::clear_assetid() {
  assetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BalanceUpdate::assetid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceUpdate.assetId)
  return assetid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BalanceUpdate::set_assetid(const ::std::string& value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceUpdate.assetId)
}
 void BalanceUpdate::set_assetid(const char* value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.BalanceUpdate.assetId)
}
 void BalanceUpdate::set_assetid(const char* value, size_t size) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.BalanceUpdate.assetId)
}
 ::std::string* BalanceUpdate::mutable_assetid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.BalanceUpdate.assetId)
  return assetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BalanceUpdate::release_assetid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.BalanceUpdate.assetId)
  
  return assetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BalanceUpdate::set_allocated_assetid(::std::string* assetid) {
  if (assetid != NULL) {
    
  } else {
    
  }
  assetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.BalanceUpdate.assetId)
}

// optional double amount = 4;
void BalanceUpdate::clear_amount() {
  amount_ = 0;
}
 double BalanceUpdate::amount() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceUpdate.amount)
  return amount_;
}
 void BalanceUpdate::set_amount(double value) {
  
  amount_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceUpdate.amount)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiLimitOrder_Order::kVolumeFieldNumber;
const int MultiLimitOrder_Order::kPriceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiLimitOrder_Order::MultiLimitOrder_Order()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.MultiLimitOrder.Order)
}

void MultiLimitOrder_Order::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiLimitOrder_Order::MultiLimitOrder_Order(const MultiLimitOrder_Order& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.MultiLimitOrder.Order)
}

void MultiLimitOrder_Order::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
  volume_ = 0;
  price_ = 0;
}

MultiLimitOrder_Order::~MultiLimitOrder_Order() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.MultiLimitOrder.Order)
  SharedDtor();
}

void MultiLimitOrder_Order::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MultiLimitOrder_Order::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiLimitOrder_Order::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiLimitOrder_Order_descriptor_;
}

const MultiLimitOrder_Order& MultiLimitOrder_Order::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

MultiLimitOrder_Order* MultiLimitOrder_Order::default_instance_ = NULL;

MultiLimitOrder_Order* MultiLimitOrder_Order::New(::google::protobuf::Arena* arena) const {
  MultiLimitOrder_Order* n = new MultiLimitOrder_Order;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiLimitOrder_Order::Swap(MultiLimitOrder_Order* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiLimitOrder_Order::InternalSwap(MultiLimitOrder_Order* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata MultiLimitOrder_Order::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiLimitOrder_Order_descriptor_;
  metadata.reflection = MultiLimitOrder_Order_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MultiLimitOrder::kUidFieldNumber;
const int MultiLimitOrder::kTimestampFieldNumber;
const int MultiLimitOrder::kClientIdFieldNumber;
const int MultiLimitOrder::kAssetPairIdFieldNumber;
const int MultiLimitOrder::kOrdersFieldNumber;
const int MultiLimitOrder::kCancelAllPreviousLimitOrdersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MultiLimitOrder::MultiLimitOrder()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.MultiLimitOrder)
}

void MultiLimitOrder::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

MultiLimitOrder::MultiLimitOrder(const MultiLimitOrder& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.MultiLimitOrder)
}

void MultiLimitOrder::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  timestamp_ = GOOGLE_LONGLONG(0);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetpairid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  cancelallpreviouslimitorders_ = false;
}

MultiLimitOrder::~MultiLimitOrder() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.MultiLimitOrder)
  SharedDtor();
}

void MultiLimitOrder::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  assetpairid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void MultiLimitOrder::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MultiLimitOrder::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MultiLimitOrder_descriptor_;
}

const MultiLimitOrder& MultiLimitOrder::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

MultiLimitOrder* MultiLimitOrder::default_instance_ = NULL;

MultiLimitOrder* MultiLimitOrder::New(::google::protobuf::Arena* arena) const {
  MultiLimitOrder* n = new MultiLimitOrder;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MultiLimitOrder::Swap(MultiLimitOrder* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MultiLimitOrder::InternalSwap(MultiLimitOrder* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata MultiLimitOrder::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MultiLimitOrder_descriptor_;
  metadata.reflection = MultiLimitOrder_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MultiLimitOrder_Order

// optional double volume = 1;
void MultiLimitOrder_Order::clear_volume() {
  volume_ = 0;
}
 double MultiLimitOrder_Order::volume() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.Order.volume)
  return volume_;
}
 void MultiLimitOrder_Order::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.Order.volume)
}

// optional double price = 2;
void MultiLimitOrder_Order::clear_price() {
  price_ = 0;
}
 double MultiLimitOrder_Order::price() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.Order.price)
  return price_;
}
 void MultiLimitOrder_Order::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.Order.price)
}

// -------------------------------------------------------------------

// MultiLimitOrder

// optional int64 uid = 1;
void MultiLimitOrder::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MultiLimitOrder::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.uid)
  return uid_;
}
 void MultiLimitOrder::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.uid)
}

// optional int64 timestamp = 2;
void MultiLimitOrder::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 MultiLimitOrder::timestamp() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.timestamp)
  return timestamp_;
}
 void MultiLimitOrder::set_timestamp(::google::protobuf::int64 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.timestamp)
}

// optional string clientId = 3;
void MultiLimitOrder::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultiLimitOrder::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiLimitOrder::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.clientId)
}
 void MultiLimitOrder::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.MultiLimitOrder.clientId)
}
 void MultiLimitOrder::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.MultiLimitOrder.clientId)
}
 ::std::string* MultiLimitOrder::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MultiLimitOrder.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultiLimitOrder::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.MultiLimitOrder.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiLimitOrder::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.MultiLimitOrder.clientId)
}

// optional string assetPairId = 4;
void MultiLimitOrder::clear_assetpairid() {
  assetpairid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& MultiLimitOrder::assetpairid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.assetPairId)
  return assetpairid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiLimitOrder::set_assetpairid(const ::std::string& value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.assetPairId)
}
 void MultiLimitOrder::set_assetpairid(const char* value) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.MultiLimitOrder.assetPairId)
}
 void MultiLimitOrder::set_assetpairid(const char* value, size_t size) {
  
  assetpairid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.MultiLimitOrder.assetPairId)
}
 ::std::string* MultiLimitOrder::mutable_assetpairid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MultiLimitOrder.assetPairId)
  return assetpairid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* MultiLimitOrder::release_assetpairid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.MultiLimitOrder.assetPairId)
  
  return assetpairid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void MultiLimitOrder::set_allocated_assetpairid(::std::string* assetpairid) {
  if (assetpairid != NULL) {
    
  } else {
    
  }
  assetpairid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetpairid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.MultiLimitOrder.assetPairId)
}

// repeated .matching.engine.messages.MultiLimitOrder.Order orders = 5;
int MultiLimitOrder::orders_size() const {
  return orders_.size();
}
void MultiLimitOrder::clear_orders() {
  orders_.Clear();
}
const ::matching::engine::messages::MultiLimitOrder_Order& MultiLimitOrder::orders(int index) const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.orders)
  return orders_.Get(index);
}
::matching::engine::messages::MultiLimitOrder_Order* MultiLimitOrder::mutable_orders(int index) {
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.MultiLimitOrder.orders)
  return orders_.Mutable(index);
}
::matching::engine::messages::MultiLimitOrder_Order* MultiLimitOrder::add_orders() {
  // @@protoc_insertion_point(field_add:matching.engine.messages.MultiLimitOrder.orders)
  return orders_.Add();
}
::google::protobuf::RepeatedPtrField< ::matching::engine::messages::MultiLimitOrder_Order >*
MultiLimitOrder::mutable_orders() {
  // @@protoc_insertion_point(field_mutable_list:matching.engine.messages.MultiLimitOrder.orders)
  return &orders_;
}
const ::google::protobuf::RepeatedPtrField< ::matching::engine::messages::MultiLimitOrder_Order >&
MultiLimitOrder::orders() const {
  // @@protoc_insertion_point(field_list:matching.engine.messages.MultiLimitOrder.orders)
  return orders_;
}

// optional bool cancelAllPreviousLimitOrders = 6;
void MultiLimitOrder::clear_cancelallpreviouslimitorders() {
  cancelallpreviouslimitorders_ = false;
}
 bool MultiLimitOrder::cancelallpreviouslimitorders() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.MultiLimitOrder.cancelAllPreviousLimitOrders)
  return cancelallpreviouslimitorders_;
}
 void MultiLimitOrder::set_cancelallpreviouslimitorders(bool value) {
  
  cancelallpreviouslimitorders_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.MultiLimitOrder.cancelAllPreviousLimitOrders)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int WalletCredentialsReload::kUidFieldNumber;
const int WalletCredentialsReload::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

WalletCredentialsReload::WalletCredentialsReload()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.WalletCredentialsReload)
}

void WalletCredentialsReload::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

WalletCredentialsReload::WalletCredentialsReload(const WalletCredentialsReload& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.WalletCredentialsReload)
}

void WalletCredentialsReload::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  uid_ = GOOGLE_LONGLONG(0);
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

WalletCredentialsReload::~WalletCredentialsReload() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.WalletCredentialsReload)
  SharedDtor();
}

void WalletCredentialsReload::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void WalletCredentialsReload::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WalletCredentialsReload::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WalletCredentialsReload_descriptor_;
}

const WalletCredentialsReload& WalletCredentialsReload::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

WalletCredentialsReload* WalletCredentialsReload::default_instance_ = NULL;

WalletCredentialsReload* WalletCredentialsReload::New(::google::protobuf::Arena* arena) const {
  WalletCredentialsReload* n = new WalletCredentialsReload;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void WalletCredentialsReload::Swap(WalletCredentialsReload* other) {
  if (other == this) return;
  InternalSwap(other);
}
void WalletCredentialsReload::InternalSwap(WalletCredentialsReload* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata WalletCredentialsReload::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WalletCredentialsReload_descriptor_;
  metadata.reflection = WalletCredentialsReload_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// WalletCredentialsReload

// optional int64 uid = 1;
void WalletCredentialsReload::clear_uid() {
  uid_ = GOOGLE_LONGLONG(0);
}
 ::google::protobuf::int64 WalletCredentialsReload::uid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.WalletCredentialsReload.uid)
  return uid_;
}
 void WalletCredentialsReload::set_uid(::google::protobuf::int64 value) {
  
  uid_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.WalletCredentialsReload.uid)
}

// optional string clientId = 2;
void WalletCredentialsReload::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& WalletCredentialsReload::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.WalletCredentialsReload.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WalletCredentialsReload::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.WalletCredentialsReload.clientId)
}
 void WalletCredentialsReload::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.WalletCredentialsReload.clientId)
}
 void WalletCredentialsReload::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.WalletCredentialsReload.clientId)
}
 ::std::string* WalletCredentialsReload::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.WalletCredentialsReload.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* WalletCredentialsReload::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.WalletCredentialsReload.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void WalletCredentialsReload::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.WalletCredentialsReload.clientId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeToBalanceUpdate::SubscribeToBalanceUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.SubscribeToBalanceUpdate)
}

void SubscribeToBalanceUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SubscribeToBalanceUpdate::SubscribeToBalanceUpdate(const SubscribeToBalanceUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.SubscribeToBalanceUpdate)
}

void SubscribeToBalanceUpdate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SubscribeToBalanceUpdate::~SubscribeToBalanceUpdate() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.SubscribeToBalanceUpdate)
  SharedDtor();
}

void SubscribeToBalanceUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeToBalanceUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeToBalanceUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeToBalanceUpdate_descriptor_;
}

const SubscribeToBalanceUpdate& SubscribeToBalanceUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

SubscribeToBalanceUpdate* SubscribeToBalanceUpdate::default_instance_ = NULL;

SubscribeToBalanceUpdate* SubscribeToBalanceUpdate::New(::google::protobuf::Arena* arena) const {
  SubscribeToBalanceUpdate* n = new SubscribeToBalanceUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeToBalanceUpdate::Swap(SubscribeToBalanceUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeToBalanceUpdate::InternalSwap(SubscribeToBalanceUpdate* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata SubscribeToBalanceUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeToBalanceUpdate_descriptor_;
  metadata.reflection = SubscribeToBalanceUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeToBalanceUpdate

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int BalanceNotification::kClientIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

BalanceNotification::BalanceNotification()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.BalanceNotification)
}

void BalanceNotification::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

BalanceNotification::BalanceNotification(const BalanceNotification& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.BalanceNotification)
}

void BalanceNotification::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clientid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

BalanceNotification::~BalanceNotification() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.BalanceNotification)
  SharedDtor();
}

void BalanceNotification::SharedDtor() {
  clientid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void BalanceNotification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BalanceNotification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BalanceNotification_descriptor_;
}

const BalanceNotification& BalanceNotification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

BalanceNotification* BalanceNotification::default_instance_ = NULL;

BalanceNotification* BalanceNotification::New(::google::protobuf::Arena* arena) const {
  BalanceNotification* n = new BalanceNotification;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void BalanceNotification::Swap(BalanceNotification* other) {
  if (other == this) return;
  InternalSwap(other);
}
void BalanceNotification::InternalSwap(BalanceNotification* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata BalanceNotification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BalanceNotification_descriptor_;
  metadata.reflection = BalanceNotification_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// BalanceNotification

// optional string clientId = 1;
void BalanceNotification::clear_clientid() {
  clientid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& BalanceNotification::clientid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.BalanceNotification.clientId)
  return clientid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BalanceNotification::set_clientid(const ::std::string& value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.BalanceNotification.clientId)
}
 void BalanceNotification::set_clientid(const char* value) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.BalanceNotification.clientId)
}
 void BalanceNotification::set_clientid(const char* value, size_t size) {
  
  clientid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.BalanceNotification.clientId)
}
 ::std::string* BalanceNotification::mutable_clientid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.BalanceNotification.clientId)
  return clientid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* BalanceNotification::release_clientid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.BalanceNotification.clientId)
  
  return clientid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void BalanceNotification::set_allocated_clientid(::std::string* clientid) {
  if (clientid != NULL) {
    
  } else {
    
  }
  clientid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), clientid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.BalanceNotification.clientId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SubscribeToQuotesUpdate::SubscribeToQuotesUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.SubscribeToQuotesUpdate)
}

void SubscribeToQuotesUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

SubscribeToQuotesUpdate::SubscribeToQuotesUpdate(const SubscribeToQuotesUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.SubscribeToQuotesUpdate)
}

void SubscribeToQuotesUpdate::SharedCtor() {
    _is_default_instance_ = false;
  _cached_size_ = 0;
}

SubscribeToQuotesUpdate::~SubscribeToQuotesUpdate() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.SubscribeToQuotesUpdate)
  SharedDtor();
}

void SubscribeToQuotesUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SubscribeToQuotesUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SubscribeToQuotesUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SubscribeToQuotesUpdate_descriptor_;
}

const SubscribeToQuotesUpdate& SubscribeToQuotesUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

SubscribeToQuotesUpdate* SubscribeToQuotesUpdate::default_instance_ = NULL;

SubscribeToQuotesUpdate* SubscribeToQuotesUpdate::New(::google::protobuf::Arena* arena) const {
  SubscribeToQuotesUpdate* n = new SubscribeToQuotesUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SubscribeToQuotesUpdate::Swap(SubscribeToQuotesUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SubscribeToQuotesUpdate::InternalSwap(SubscribeToQuotesUpdate* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata SubscribeToQuotesUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SubscribeToQuotesUpdate_descriptor_;
  metadata.reflection = SubscribeToQuotesUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SubscribeToQuotesUpdate

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int QuotesUpdate::kAssetIdFieldNumber;
const int QuotesUpdate::kPriceFieldNumber;
const int QuotesUpdate::kVolumeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

QuotesUpdate::QuotesUpdate()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:matching.engine.messages.QuotesUpdate)
}

void QuotesUpdate::InitAsDefaultInstance() {
  _is_default_instance_ = true;
}

QuotesUpdate::QuotesUpdate(const QuotesUpdate& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:matching.engine.messages.QuotesUpdate)
}

void QuotesUpdate::SharedCtor() {
    _is_default_instance_ = false;
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  assetid_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  price_ = 0;
  volume_ = 0;
}

QuotesUpdate::~QuotesUpdate() {
  // @@protoc_insertion_point(destructor:matching.engine.messages.QuotesUpdate)
  SharedDtor();
}

void QuotesUpdate::SharedDtor() {
  assetid_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
  }
}

void QuotesUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuotesUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuotesUpdate_descriptor_;
}

const QuotesUpdate& QuotesUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ProtocolMessages_2eproto();
  return *default_instance_;
}

QuotesUpdate* QuotesUpdate::default_instance_ = NULL;

QuotesUpdate* QuotesUpdate::New(::google::protobuf::Arena* arena) const {
  QuotesUpdate* n = new QuotesUpdate;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void QuotesUpdate::Swap(QuotesUpdate* other) {
  if (other == this) return;
  InternalSwap(other);
}
void QuotesUpdate::InternalSwap(QuotesUpdate* other) {
  GetReflection()->Swap(this, other);}

::google::protobuf::Metadata QuotesUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuotesUpdate_descriptor_;
  metadata.reflection = QuotesUpdate_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// QuotesUpdate

// optional string assetId = 1;
void QuotesUpdate::clear_assetid() {
  assetid_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 const ::std::string& QuotesUpdate::assetid() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.QuotesUpdate.assetId)
  return assetid_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuotesUpdate::set_assetid(const ::std::string& value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:matching.engine.messages.QuotesUpdate.assetId)
}
 void QuotesUpdate::set_assetid(const char* value) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:matching.engine.messages.QuotesUpdate.assetId)
}
 void QuotesUpdate::set_assetid(const char* value, size_t size) {
  
  assetid_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:matching.engine.messages.QuotesUpdate.assetId)
}
 ::std::string* QuotesUpdate::mutable_assetid() {
  
  // @@protoc_insertion_point(field_mutable:matching.engine.messages.QuotesUpdate.assetId)
  return assetid_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* QuotesUpdate::release_assetid() {
  // @@protoc_insertion_point(field_release:matching.engine.messages.QuotesUpdate.assetId)
  
  return assetid_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void QuotesUpdate::set_allocated_assetid(::std::string* assetid) {
  if (assetid != NULL) {
    
  } else {
    
  }
  assetid_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), assetid);
  // @@protoc_insertion_point(field_set_allocated:matching.engine.messages.QuotesUpdate.assetId)
}

// optional double price = 2;
void QuotesUpdate::clear_price() {
  price_ = 0;
}
 double QuotesUpdate::price() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.QuotesUpdate.price)
  return price_;
}
 void QuotesUpdate::set_price(double value) {
  
  price_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.QuotesUpdate.price)
}

// optional double volume = 3;
void QuotesUpdate::clear_volume() {
  volume_ = 0;
}
 double QuotesUpdate::volume() const {
  // @@protoc_insertion_point(field_get:matching.engine.messages.QuotesUpdate.volume)
  return volume_;
}
 void QuotesUpdate::set_volume(double value) {
  
  volume_ = value;
  // @@protoc_insertion_point(field_set:matching.engine.messages.QuotesUpdate.volume)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace messages
}  // namespace engine
}  // namespace matching

// @@protoc_insertion_point(global_scope)
